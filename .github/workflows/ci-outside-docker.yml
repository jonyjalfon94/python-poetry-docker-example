name: Another CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9.6

    # install packages via poetry and cache result so future CI runs are fast
    # the result is only cached if the build is successful
    # https://stackoverflow.com/questions/62977821/how-to-cache-poetry-install-for-github-actions
    - name: Install poetry
      uses: snok/install-poetry@v1.2.0
      with:
        version: 1.1.8
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

    - name: Code Formatting
      run: |
        poetry run black --config ./pyproject.toml --check app tests

    - name: Create results directory
      run: |-
        mkdir results

    - name: Run Tests
      run: |
        poetry run pytest ./tests --junitxml=./results/result.xml
        poetry run coverage run --rcfile ./pyproject.toml -m pytest ./tests
        poetry run coverage report -m > ./results/coverage.txt
        
    - name: Archive code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: results
        
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: code-coverage-report
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: code-coverage-report/**/*.xml
          
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
    - uses: jonyjalfon94/workflow-templates/build-and-push-docker@main
      name: Build with Docker
      with:
        registry_username: jonyjalfon94
        registry_password: ${{ secrets.DOCKERHUBPASSWORD }}
        image_name: demo-app
        tag: latest
        build_args: |
          FIRST_ARG="Hello"
          SECOND_ARG="World"
